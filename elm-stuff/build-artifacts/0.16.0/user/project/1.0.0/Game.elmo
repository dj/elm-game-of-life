Elm.Game = Elm.Game || {};
Elm.Game.make = function (_elm) {
   "use strict";
   _elm.Game = _elm.Game || {};
   if (_elm.Game.values) return _elm.Game.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp$Simple = Elm.StartApp.Simple.make(_elm);
   var _op = {};
   var initialModel = {board: _U.list([_U.list([0,0,0,0]),_U.list([0,0,0,0]),_U.list([0,0,0,0]),_U.list([0,0,0,0])]),step: 0};
   var eachRow = F2(function (address,row) {    return A2($Html.div,_U.list([]),_U.list([$Html.text($Basics.toString(row))]));});
   var board = F2(function (address,model) {    return A2($Html.div,_U.list([]),A2($List.map,eachRow(address),model.board));});
   var update = F2(function (action,model) {
      var _p0 = action;
      if (_p0.ctor === "NoOp") {
            return model;
         } else {
            return _U.update(model,{step: model.step + 1});
         }
   });
   var Step = {ctor: "Step"};
   var view = F2(function (address,model) {
      return A2($Html.div,
      _U.list([]),
      _U.list([A2(board,address,model)
              ,A2($Html.button,_U.list([A2($Html$Events.onClick,address,Step)]),_U.list([$Html.text("step")]))
              ,$Html.text($Basics.toString(model.step))]));
   });
   var main = $StartApp$Simple.start({model: initialModel,view: view,update: update});
   var NoOp = {ctor: "NoOp"};
   return _elm.Game.values = {_op: _op,NoOp: NoOp,Step: Step,update: update,eachRow: eachRow,board: board,view: view,initialModel: initialModel,main: main};
};